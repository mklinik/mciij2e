options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniJavaParser)
  public class MiniJavaParser {}
PARSER_END(MiniJavaParser)


SKIP : {
      < "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
    | < "/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
    | " "
    | "\t"
    | "\n"
}

TOKEN : {
      <CLASS: "class">
    | <PUBLIC: "public">
    | <STATIC: "static">
    | <VOID: "void">
    | <MAIN: "main">
    | <STRING: "String">
    | <EXTENDS: "extends">
    | <RETURN: "return">
    | <INT: "int">
    | <BOOLEAN: "boolean">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <PRINT: "System.out.println">
    | <LENGTH: "length">
    | <TRUE: "true">
    | <FALSE: "false">
    | <THIS: "this">
    | <NEW: "new">
}

TOKEN : {
      <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
    |  <#LETTER: ["A"-"Z","_","a"-"z"]>
    |  <#DIGIT: ["0"-"9"]>
    | <INTEGER_LITERAL: (["0"-"9"])+ >
    | <OP: "&&" | "<" | "+" | "-" | "*">
}






void Program() :
{}
{
    MainClass() (ClassDecl())*
}

void MainClass() :
{}
{
    <CLASS> <IDENTIFIER>
    "{"
        <PUBLIC> <STATIC> <VOID> "main" "(" <STRING> "[" "]" <IDENTIFIER> ")"
        "{"
            Statement()
        "}"
    "}"
}

void ClassDecl() :
{}
{
    <CLASS> <IDENTIFIER>
    "{"
        (VarDecl())*
        (MethodDecl())*
    "}"
}

void VarDecl() :
{}
{
    Type() <IDENTIFIER> ";"
}

void MethodDecl() :
{}
{
    <PUBLIC> Type() <IDENTIFIER> "(" FormalList() ")"
    "{"
        (VarDecl())*
        (Statement())*
        <RETURN> Expression() ";"
    "}"
}

void FormalList() :
{}
{
    ( Formal() FormalListPrime() )?
}

void Formal() :
{}
{
    Type() <IDENTIFIER>
}

void FormalListPrime() :
{}
{
    ( "," Formal() FormalListPrime() )?
}

void Type() :
{}
{
      <INT> "[" "]"
    | <BOOLEAN>
    | <INT>
    | <IDENTIFIER>
}

void Statement() :
{}
{
      "{" ( Statement() )* "}"
    | <IF> "(" Expression() ")" Statement() <ELSE> Statement()
    | <WHILE> "(" Expression() ")" Statement()
    | <PRINT> "(" Expression() ")"
    | <IDENTIFIER> "=" Expression() ";"
    | <IDENTIFIER> "[" Expression() "]" "=" Expression() ";"
}

void Expression() :
{}
{
      Expression() <OP> Expression()
    | Expression() "[" Expression() "]"
    | Expression() "." <LENGTH>
    | Expression() "." <IDENTIFIER> "(" ExpressionList() ")"
    | <INTEGER_LITERAL>
    | <TRUE>
    | <FALSE>
    | <IDENTIFIER>
    | <THIS>
    | <NEW> <INT> "[" Expression() "]"
    | <NEW> <IDENTIFIER> "(" ")"
    | "!" Expression()
    | "(" Expression() ")"
}


void ExpressionList() :
{}
{
    ( Expression() ExpressionListPrime() )?
}

void ExpressionListPrime() :
{}
{
    ( "," Expression() ExpressionListPrime() )?
}
