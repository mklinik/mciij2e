options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniJavaParser)
  public class MiniJavaParser {}
PARSER_END(MiniJavaParser)


// Insert a specification of a lexical analysis here. 
TOKEN : {
      <IDENTIFIER: ["a"-"z"] | ["A"-"Z"] | ["0"-"9"] (["a"-"z"] | ["A"-"Z"] | ["0"-"9"] | "_")* >
    | <INTEGER_LITERAL: (["0"-"9"])+ >
    | <OP: "&&" | "<" | "+" | "-" | "*">
}

SKIP : {
      < "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
    | <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
    | " "
    | "\t"
    | "\n"
}

// The following is a simple grammar that will allow you
// to test the generated lexer.




void Goal() :
{}
{
  ( MiniJavaToken() )*
  <EOF>
}

void MiniJavaToken():
{}
{
  "class"  |  <IDENTIFIER> | "{" | "public" | "static" | "void" |
  "main" | "(" | "String"  | "[" | "]" | ")" | "}" | "extends" | ";"
  | "return" | "," | "int" | "boolean" | "=" | "if" | "else" | "while"
  | "System.out.println"  | "." |
  "length" | <INTEGER_LITERAL> | "true" | "false" | "this" | "new" |
  "!" | "<OP>"
}


