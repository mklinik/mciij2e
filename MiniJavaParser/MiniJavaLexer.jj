options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniJavaParser)
  public class MiniJavaParser {}
PARSER_END(MiniJavaParser)


SKIP : {
      < "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
    | < "/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
    | " "
    | "\t"
    | "\n"
}

TOKEN : {
      <CLASS: "class">
    | <PUBLIC: "public">
    | <STATIC: "static">
    | <VOID: "void">
    | <MAIN: "main">
    | <STRING: "String">
    | <EXTENDS: "extends">
    | <RETURN: "return">
    | <INT: "int">
    | <BOOLEAN: "boolean">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <PRINT: "System.out.println">
    | <LENGTH: "length">
    | <TRUE: "true">
    | <FALSE: "false">
    | <THIS: "this">
    | <NEW: "new">
}

TOKEN : {
      <IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)*>
    |  <#LETTER: ["A"-"Z","_","a"-"z"]>
    |  <#DIGIT: ["0"-"9"]>
    | <INTEGER_LITERAL: (["0"-"9"])+ >
    | <OP: "&&" | "<" | "+" | "-" | "*">
}

// The following is a simple grammar that will allow you
// to test the generated lexer.




void Goal() :
{}
{
  ( MiniJavaToken() )*
  <EOF>
}

void MiniJavaToken():
{}
{
      "class"    { System.out.println("got keyword 'class'"); }
    | "{"
    | "public"
    | "static"
    | "void"
    | "main"
    | "("
    | "String"
    | "["
    | "]"
    | ")"
    | "}"
    | "extends"
    | ";"
    | "return"
    | ","
    | "int"
    | "boolean"
    | "="
    | "if"
    | "else"
    | "while"
    | "System.out.println"
    | "."
    | "length"
    | "true"
    | "false"
    | "this"
    | "new"
    | "!"
    | <OP>  { System.out.println("got operator " + token.image); }
    | <IDENTIFIER>  { System.out.println("got identifier " + token.image); }
    | <INTEGER_LITERAL>   { System.out.println("got integer literal " + token.image); }
}


